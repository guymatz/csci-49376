#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Copy of csci_49376_project_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
        https://colab.research.google.com/drive/1ybkA9zZjGQL2tuqIs8vPuQksRJDqSZ71
"""

import os
import sys

# Import SparkSession
from pyspark.sql import SparkSession

EDGE_FILE = "edges.tsv.gz"
NODE_FILE = "nodes.tsv.gz"

if "COLAB_GPU" in os.environ:
    print("I'm running on Colab")
    # !pip install pyspark
    from google.colab import drive

    drive.mount("/content/drive")
    # drive.flush_and_unmount()
    EDGE_FILE = f"/content/drive/MyDrive/School/CSCI/Big-data/{EDGE_FILE}"
    # EDGE_FILE = "/content/drive/MyDrive/School/CSCI/Big-data/edges-test.tsv"
    NODE_FILE = f"/content/drive/MyDrive/School/CSCI/Big-data/{NODE_FILE}"
else:
    print("I'm running locally")
    import urllib.request

    NODES_GZ_URL = "https://drive.google.com/uc?id=1-VBD-Un8SRj6mmn38EQoacqRuBNizoi0&export=download"
    EDGES_GZ_URL = "https://drive.google.com/uc?id=1-7tacmfwahcRtN6mS9FKB8Ob_vbxgUxt&export=download"
    if not os.path.exists("nodes.tsv.gz"):
        print("Downloading nodes")
        urllib.request.urlretrieve(NODES_GZ_URL, "nodes.tsv.gz")
    if not os.path.exists("edges.tsv.gz"):
        print("Downloading edges")
        urllib.request.urlretrieve(EDGES_GZ_URL, "edges.tsv.gz")

# Create a Spark Session
ss = SparkSession.builder.master("local[*]").getOrCreate()
edges = ss.read.csv(EDGE_FILE, header=True, sep="\t")
nodes = ss.read.csv(NODE_FILE, header=True, sep="\t")

# print(f"Edges: {edges.count()}")
# print(f"Nodes: {nodes.count()}")

# sys.exit(0)

print(
    """
Q1.

For each drug, compute the number of genes and the number of diseases
associated with the drug. Output results with top 5 number of genes
in descending order
"""
)
"""
```
❯ gzip -dc edges.tsv.gz| grep ^Compound:: | grep Gene:: | \
    awk '{print $1}' | sort | uniq -c | sort -nr | head -3 | \
    while read gn c
    do
    dn=$(gzip -dc edges.tsv.gz | grep ^${c} | grep Disease:: | wc -l)
    echo "$c $gn $dn"
done
```
"""
# Filter out the Compounds associated with Genes & Diseases
disease_compounds = edges.filter(
    edges.source.startswith("Compound") & (edges.target.startswith("Disease"))
)

gene_compounds = edges.filter(
    edges.source.startswith("Compound") & (edges.target.startswith("Gene"))
)

# gene_compounds.sample(.01).show(10)

# disease_compounds.show(10)

# Convert    |source|target::xyz| -> |source| 1 |
disease_rdd_1 = disease_compounds.rdd.map(lambda x: (x[0], 1))
# print("Diseases: " , disease_rdd_1.take(3))
gene_rdd_1 = gene_compounds.rdd.map(lambda x: (x[0], 1))
# print("Genes: ", gene_rdd_1.take(3))

disease_rdd_2 = disease_rdd_1.reduceByKey(lambda x, y: x + y)
# print("Diseases: ", disease_rdd_2.take(3))
gene_rdd_2 = gene_rdd_1.reduceByKey(lambda x, y: x + y)
# print("Genes: ", gene_rdd_2.take(3))

disease_df = disease_rdd_2.toDF(["compound", "disease_count"])
gene_df = gene_rdd_2.toDF(["compound", "gene_count"])

joined_df = gene_df.join(disease_df, gene_df.compound == disease_df.compound).select(
    gene_df.compound, "gene_count", "disease_count"
)
sorted_joined_df = joined_df.sort('gene_count', ascending=False)
sorted_joined_df.show(3)

print(
    """
Q2:
Compute the number of diseases associated
with 1, 2, 3, …, n drugs. Output results with the top
5 number of diseases in a descending order.
E.g.
1 drug -> 2 diseases
2 drugs -> 1 diseases
"""
)
"""
```
❯ grep ^Compound edges.tsv| grep Disease:: | \
    sort -k1 | \
    awk '{print $1}' | \
    uniq -c | sort -n | awk '{print $1}' | uniq -c
```
"""
disease_compounds = edges.filter(
    edges.source.startswith("Compound") & (edges.target.startswith("Disease"))
)
# disease_compounds.take(5)

rdd_1 = disease_compounds.rdd.map(lambda x: (x[0], 1))
# rdd_1.take(5)

rdd_2 = rdd_1.reduceByKey(lambda x, y: x + y)
rdd_2.take(5)

df_1 = (
    rdd_2.toDF(["compound", "drug_count"])
    .groupBy("drug_count")
    .count()
    .withColumnRenamed("count", "disease_count")
)
df_1.sort("count", ascending=False).show(3)

print(
    """
Q3:
Get the name of drugs that have the top 5 number of genes.  Output the results.
```
MagicPill1 -> 2
MagicPill2 -> 1
MagicPill3 -> 0
```
"""
)
"""
```
cat edges.tsv| grep ^Compound:: | grep Gene:: | awk '{print $1}' | sort | uniq -c | sort -nr | head -5 | while read n c
do
    C=$(grep $c nodes.tsv | awk '{print $2}')
    echo $C $n
done
```

```
Crizotinib 585
Dasatinib 564
Doxorubicin 532
Vinblastine 523
Digoxin 52
```
"""

compound_nodes = nodes.filter(nodes.id.startswith("Compound"))
# compound_nodes.take(5)

rdd_1 = gene_compounds.rdd.map(lambda x: (x[0], 1))
# rdd_1.take(5)

q3_df = rdd_1.reduceByKey(lambda x, y: x + y).toDF(
    ["compound", "gene_count"]
)

joined_q3_df = q3_df.join(compound_nodes, q3_df.compound == compound_nodes.id).select(
    compound_nodes.name, q3_df.gene_count
)

sorted_joined_q3_df = joined_q3_df.sort(joined_q3_df.gene_count, ascending=False)
sorted_joined_q3_df.show(5)
